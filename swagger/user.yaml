openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for user management with CSV export and bulk insert

tags:
  - name: Users

paths:
  /user/createuser:
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad Request

  /user/allusers:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: No users found

  /user/update/{id}:
    put:
      summary: Update a user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated
        '404':
          description: User not found

  /user/delete/{id}:
    delete:
      summary: Delete a user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found

  /user/userbyid/{id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User data
        '404':
          description: User not found

  /user/subjectbyuser/{id}:
    get:
      summary: Get users by subject ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Users list by subject ID
        '400':
          description: User or subject not found

  /user/bulkinsert:
    post:
      summary: Bulk insert users from CSV file
      tags: [Users]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Users inserted successfully
        '400':
          description: Validation error
        '500':
          description: Server error
          
  /user/generatetoken:
    post:
      summary: Generate JWT Token for a Student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdNameValidator'
      responses:
        '200':
          description: Token generated successfully
          content:
            text/plain:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        '500':
          description: Internal server error

  /user/exportstudent:
    get:
      summary: Export student data (requires valid token)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Student data exported successfully
        '401':
          description: Unauthorized - Token missing or invalid
        '500':
          description: Internal server error
  

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        age:
          type: integer
        subjectId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
           type: string
           format: date-time

    UserInput:
      type: object
      required:
        - name
        - age
        - subjectId
      properties:
        name:
          type: string
        age:
          type: integer
        subjectId:
          type: integer

    IdNameValidator:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe

    
